name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'

jobs:
  build-test-coverage:
    name: Build, Test & Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ./CacheWithRedis.Api.sln
      
    - name: Build solution
      run: dotnet build ./CacheWithRedis.Api.sln --no-restore --configuration Release
      
    - name: Run unit tests with coverage
      run: |
        dotnet test ./CacheWithRedis.Api.Unit.Tests/CacheWithRedis.Api.Unit.Tests.csproj \
          --no-build \
          --configuration Release \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage \
          --logger trx \
          --verbosity normal
          
    - name: Install ReportGenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool
      
    - name: Generate coverage report
      run: |
        reportgenerator \
          -reports:"./coverage/**/coverage.cobertura.xml" \
          -targetdir:"./coverage/html" \
          -reporttypes:"Html;Cobertura;JsonSummary" \
          -verbosity:Info
          
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/Cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: 5monkeys/cobertura-action@master
      with:
        path: ./coverage/Cobertura.xml
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        minimum_coverage: 90
        fail_below_threshold: true
        show_missing: true
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          **/*.trx
          ./coverage/html/**
          
    - name: Publish coverage summary
      if: github.event_name == 'pull_request'
      run: |
        echo "## Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "./coverage/Summary.json" ]; then
          COVERAGE=$(cat ./coverage/Summary.json | jq -r '.summary.linecoverage')
          echo "**Line Coverage: ${COVERAGE}%**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if (( $(echo "$COVERAGE >= 90" | bc -l) )); then
            echo "✅ Coverage meets minimum threshold (90%)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Coverage below minimum threshold (90%)" >> $GITHUB_STEP_SUMMARY
          fi
        fi